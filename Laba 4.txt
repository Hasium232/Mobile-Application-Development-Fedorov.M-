// 1. Определить день недели по номеру
fun main() {
    print("Введите номер дня недели от 1 до 8: ")
    val dayNumber = readln()?. toIntOrNull() ?:0
    val dayOfWeek = when (dayNumber){
        1 -> "Понедельник"
        2 -> "Вторник"
        3 -> "Среда"
        4 -> "Четверг"
        5 -> "Пятница"
        6 -> "Суббота"
        7 -> "Воскресенье"
        else -> "Неверный номер дня"
    }
    println(dayOfWeek)
}



// 2. Определить тип треугольника по длинам сторон
fun main(){
    //Определить тип треугольника по длинам сторон
    println("Введите длину стороны a: ")
    val a = readln()?.toIntOrNull()?:0
    println("Введите длину стороны b: ")
    val b = readln()?.toIntOrNull()?:0
    println("Введите длину стороны c: ")
    val c = readln()?.toIntOrNull()?:0
// Определение типа треугольника
    val triangleType = when {
        a == b && b == c -> "Равносторонний"
        a == b || b == c || a == c -> "Равнобедренный"
        else -> "Разносторонний"
    }
    println("Тип треугольника: $triangleType")
}


// 3. Вывод оценок по числовым значениям
fun main(){
    print("Введите числовое значение (0-100): ")
    val score =readln()?.toIntOrNull()?:0

    //Определение оценки
    val grade = when (score){
        in 90..100 -> "A"
        in 80..89 -> "B"
        in 70..79 -> "C"
        in 60..69 -> "D"
        else -> "F"
    }
    println("Оценка: $grade")
}


// 4. Определение времени суток
fun main(){
    print("Введите текущий час: ")
    val hour = readln()?.toIntOrNull()?:-1
    // Определение времени суток
    val timeOfDay = when (hour) {
        in 6..11 -> "Утро"
        in 12..17 -> "День"
        in 18..23 -> "Вечер"
        in 0..5 -> "Ночь"
        else -> "Неверное время"
    }
    println("Время суток: $timeOfDay")
}


// 5. Определить знак числа
fun main() {
    println("Введите число:")
    val number = readLine()?.toDoubleOrNull() ?: 0.0
    when {
        number > 0 -> println("Число положительное.")
        number < 0 -> println("Число отрицательное.")
        else -> println("Число равно нулю.")
    }
}



// 6. Угадай число
// Импортируем модуль Random
import kotlin.random.Random
fun main() {
    // Загадываем число от 1 до 100
    val secretNumber = Random.nextInt(1, 101) // Загадываем случайное число от 1 до 100
    // Счётчик попыток
    var attempts = 0
    println("Добро пожаловать в игру 'Угадай число'!")
    println("Я загадал число от 1 до 100. Попробуйте его угадать.")
    // Цикл продолжается до тех пор, пока пользователь не угадает число
    while (true) {
        print("Введите ваше предположение: ")
        // Преобразуем введённую строку в число; если преобразование не удалось - пропускаем текущую итерацию цикла
        val userGuess = readLine()?.toIntOrNull() ?: continue
        // Увеличиваем счётчик попыток на единицу после каждого ввода пользователя
        attempts++
        // Сравниваем введённое пользователем значение с загаданным числом и выводим подсказки
        when {
            userGuess < secretNumber -> println("Ваше число слишком маленькое. Попробуйте снова.")
            userGuess > secretNumber -> println("Ваше число слишком большое. Попробуйте снова.")
            else -> {
                // Если пользователь угадал правильное значение - выводим поздравление
                println("Поздравляем! Вы угадали за $attempts попыток.")
                break
            }
        }
    }
}


// 7. Определение длины строки
fun main() {
    print("Введите строку: ")
    val inputString = readLine() ?: ""
    // Определяем длину строки с помощью свойства length
    val stringLength = inputString.length
    // Выводим результат на экран
    println("Длина введённой строки: $stringLength")
}


// 8. Определить время приготовления по типу пищи
fun getCookingTime(foodType: String): Int {
    // Времена приготовления в минутах
    val cookingTimes = mapOf(
        "говядина" to 30,
        "свинина" to 25,
        "баранина" to 35,
        "птица" to 20,
        "рыба" to 15,
        "овощи" to 10
    )
    // Возвращаем время приготовления для указанного типа пищи или дефолтное значение (0), если тип не найден.
    return cookingTimes[foodType] ?: 0
}
fun main() {
    // Запрашиваем у пользователя ввод типа пищи.
    print("Введите тип пищи (говядина, свинина, баранина, птица, рыба или овощи): ")
    // Читаем введённый текст и определяем время приготовления.
    val foodType = readLine() ?: ""
    val cookingTime = getCookingTime(foodType.toLowerCase())
    if (cookingTime > 0) {
        println("Время приготовления $foodType составляет примерно $cookingTime минут.")
    } else {
        println("Неизвестный тип пищи. Пожалуйста, попробуйте снова.")
    }
}

// 9. Определение длины строки
fun main() {
    print("Введите строку: ")
    val inputString = readLine() ?: ""
    // Определяем длину строки с помощью свойства length
    val stringLength = inputString.length
    // Выводим результат на экран
    println("Длина введённой строки: $stringLength")
}


fun main() {
	// 10. Способ оплаты
    // Запрашиваем у пользователя способ оплаты
    println("Выберите способ оплаты (наличные, кредитная карта, PayPal):")
    val paymentMethod = readLine()?.toLowerCase()

    // Выводим сообщение в зависимости от выбранного способа оплаты
    when (paymentMethod) {
        "наличные" -> println("Вы выбрали оплату наличными. Подготовьте сумму к оплате.")
        "кредитная карта" -> println("Вы выбрали оплату кредитной картой. Введите данные карты.")
        "paypal" -> println("Вы выбрали оплату через PayPal. Вы будете перенаправлены на страницу PayPal.")
        else -> println("Неизвестный способ оплаты. Пожалуйста, выберите один из предложенных вариантов.")
    }
}


fun main() {
	// 11. Группа крови
    // Запрашиваем у пользователя группу крови
    println("Введите вашу группу крови (A, B, AB, O):")
    val bloodType = readLine()?.toUpperCase()

    // Определяем, какие группы крови подходят для переливания
    when (bloodType) {
        "A" -> println("Для группы крови A можно переливать: A, O")
        "B" -> println("Для группы крови B можно переливать: B, O")
        "AB" -> println("Для группы крови AB можно переливать: A, B, AB, O")
        "O" -> println("Для группы крови O можно переливать: O")
        else -> println("Неизвестная группа крови. Пожалуйста, введите A, B, AB или O.")
    }
}


fun main() {
	// 12. Национальность
    // Запрашиваем у пользователя название страны
    println("Введите название страны (США, Россия, Япония и т.д.):")
    val country = readLine()?.toLowerCase()

    // Определяем национальность в зависимости от страны
    when (country) {
        "сша" -> println("Национальность: Американец/Американка")
        "россия" -> println("Национальность: Русский/Русская")
        "япония" -> println("Национальность: Японец/Японка")
        "германия" -> println("Национальность: Немец/Немка")
        "франция" -> println("Национальность: Француз/Француженка")
        "китай" -> println("Национальность: Китаец/Китаянка")
        "бразилия" -> println("Национальность: Бразилец/Базильянка")
        "индия" -> println("Национальность: Идиец/Идианка")
        else -> println("Информация о национальности для этой страны недоступна.")
    }
}


fun main() {
	// 13. Код ошибки 
    // Запрашиваем у пользователя код ошибки
    println("Введите код ошибки (100, 200, 300, 400, 500):")
    val errorCode = readLine()?.toIntOrNull()

    // Определяем сообщение об ошибке в зависимости от кода
    when (errorCode) {
        100 -> println("Ошибка сети: Проблемы с подключением к интернету.")
        200 -> println("Ошибка сервера: Сервер временно недоступен.")
        300 -> println("Ошибка перенаправления: Запрошенный ресурс перемещен.")
        400 -> println("Ошибка клиента: Неверный запрос.")
        500 -> println("Ошибка сервера: Внутренняя ошибка сервера.")
        else -> println("Неизвестный код ошибки. Пожалуйста, введите корректный код.")
    }
}